IncludeDeclarationTop 
!{ 
#include <vector>
#include <string>
#include <map>
#include <cstdint>
#include "tinyXML\tinyxml.h"
!}

IncludeDefinitionTop !{
#include "stdafx.h"

#include "ByteReader.h"
#include "ByteWriter.h"
#include <sstream>
#include "%output_name%.h"
!}

ImportInclude %{ #include "%name%.h" %}

StructDeclaration %{ extern struct %name%; %}

StructDefinition 
!{
struct %name% 
{
    %body% 
};
!}

StructDefinitionWithBase
!{
struct %name% : public %base%
{
    %body% 
};
!}

StructFieldDeclaration %{ %type% %field%; %}

MethodDeclaration %{ 
    %returnType% %method%(%param%);
%}

MethodDefinition !{ 
%returnType% %larva%::%method%(%param%)
{
    %body%
}
!}

ConstructorDeclaration %{ %name%(); %}
ConstructorDefinition !{ 
%name%::%name%()
{
    %body%
}
!}

ConstructorWithBaseDeclaration %{ %name%(); %}
ConstructorWithBaseDefinition !{ 
%name%::%name%() : %base%()
{
    %body%
}
!}

FieldInitialisation %{ %field% = %value%; %}

EnumFieldDeclaration %{ %field% , %}
EnumFieldWithValueDeclaration %{ %field% = %value% , %}
EnumValueDeclaration %{ %name%::%value% %}

EnumDeclaration !{
namespace %name%
{
    enum Type
    {
        %body%
    };
};
!}

type 1 default bool = bool
type 1 default int32 = int32_t
type 1 default uint32 = uint32_t
type 1 string String = std::string
type 2 array Array = std::vector<%type0%>
type 1 struct struct = !{struct %namespace%::%name%!}
type 1 default enum = !{enum %namespace%::%name%::Type!}
type 3 map Map = !{std::map<%type0%, %type1%>!}


method size param = void
method size returnType = size_t
method size body = 
!{
%body%

return %return%;
!}

method size body return = !{0 %%!}

method size body return default = !{ + sizeof(%type%)!}
method size body return string = !{ + (2 + %field%.size())!}
method size body return struct = !{ + %field%.size()!}
method size body return array = !{ + s_%field%!}
method size body return array default = !{ + (sizeof(size_t) + sizeof(%type0%) * %field%.size())!}
method size body body array default = !{ !}
method size body return map = !{ + s_%field%!}

method size body body = !{%%!}

method size body body array = !{
size_t s_%field% = sizeof(size_t);
{
    for (size_t i = 0; i < %field%.size(); i++)
    {
        %!Larva.SubLarvae[0].GetTypeDefinition()% &%_e_name% = %field%[i];
        
        %#method size body body#%_e_name%#%!Larva.SubLarvae[0].FullName%#%
        
        s_%field% += 0 %#method size body return#%_e_name%#%!Larva.SubLarvae[0].FullName%#%;
    }
}
!}

method size body return arrayMethod = !{totalSize_%field_id%!}

method size body body map = !{
size_t s_%field% = sizeof(size_t);
{
    for (%!Larva.GetTypeDefinition()%::iterator it = %field%.begin(); it != %field%.end(); ++it)        
    {
        const %!Larva.SubLarvae[0].GetTypeDefinition()% &%_e_key% = it->first;
        const %!Larva.SubLarvae[0].GetTypeDefinition()% &%_e_value% = it->second;
        
        %#method size body body#%_e_key%#%!Larva.SubLarvae[0].FullName%#%
        %#method size body body#%_e_value%#%!Larva.SubLarvae[1].FullName%#%
        
        s_%field% += 0 %#method size body return#%_e_key%#%!Larva.SubLarvae[0].FullName%#%
                       %#method size body return#%_e_value%#%!Larva.SubLarvae[1].FullName%#%;
    }
}
!}

method write param = !{void **data!}
method write returnType = size_t

method write body =
!{
ByteWriter writer(*data, size());

%% 

if (*data == NULL)
{
    *data = writer.getData();
    writer.giveBufferOwnership();
}

return writer.getDataSize();
!}

method write body default = !{writer.write<%type%>(%field%);!}
method write body string = !{writer.writeString(%field%);!}

method write body struct = !{ 
void *p_%field% = writer.getPosition();
%field%.write(&p_%field%);
writer.skipBytes(%field%.size()); 
!}

method write body array default = !{
// write array %field%
writer.write<size_t>(%field%.size());
writer.writeBytes(%field%.data(), sizeof(%type0%) * %field%.size() );
!}

method write body array = !{ 
// write array %field%
writer.write<size_t>(%field%.size());

for (size_t i = 0; i < %field%.size(); i++)
{
    %!Larva.SubLarvae[0].GetTypeDefinition()% &%_e_name% = %field%[i];
        
    %#method write body#%_e_name%#%!Larva.SubLarvae[0].FullName%#%
}
!}

method write body array default = !{
// write array %field%
writer.write<size_t>(%field%.size());
writer.writeBytes(%field%.data(), sizeof(%type0%) * %field%.size() );
!}

method write body map = !{ 
// write map %field%
writer.write<size_t>(%field%.size());
{
    for (%!Larva.GetTypeDefinition()%::iterator it = %field%.begin(); it != %field%.end(); ++it)        
    {
        const %!Larva.SubLarvae[0].GetTypeDefinition()% &%_e_key% = it->first;
        const %!Larva.SubLarvae[0].GetTypeDefinition()% &%_e_value% = it->second;
        
        %#method write body#%_e_key%#%!Larva.SubLarvae[0].FullName%#%
        %#method write body#%_e_value%#%!Larva.SubLarvae[1].FullName%#%
    }
}
!}

method read param = !{const void *data!}
method read returnType = void

method read body =
!{
ByteReader reader(data);

%%
!}

method read body default = !{%field% = reader.read<%type%>();!}
method read body string = !{%field% = reader.readString();!}

method read body struct = !{ 
%field%.read(reader.getPosition());
reader.skipBytes(%field%.size()); 
!}

method read body array default = !{ 
// read array %field%
size_t s_%field% = reader.read<size_t>();
%field%.resize(s_%field%);
reader.readBytes((char*)%field%.data(), sizeof(%type0%) * s_%field%);
!}

method read body array = !{ 
// read array %field%
size_t s_%field% = reader.read<size_t>();
%field%.resize(s_%field%);

for (size_t i = 0; i < s_%field%; i++)
{
    %!Larva.SubLarvae[0].GetTypeDefinition()% &%_e_name% = %field%[i];
        
    %#method read body#%_e_name%#%!Larva.SubLarvae[0].FullName%#%
}
!}

method read body map = !{ 
// read array %field%
size_t s_%field% = reader.read<size_t>();

for (size_t i = 0; i < s_%field%; i++)
{
    %!Larva.SubLarvae[0].GetTypeDefinition()% %_e_key%;
    %!Larva.SubLarvae[0].GetTypeDefinition()% %_e_value%;
        
    %#method read body#%_e_key%#%!Larva.SubLarvae[0].FullName%#%
    %#method read body#%_e_value%#%!Larva.SubLarvae[1].FullName%#%
    
    %field%[%_e_key%] = %_e_value%;
}
!}

## toXml

method toXml param = !{TiXmlElement *parentNode!}
method toXml returnType = std::string

method toXml body =
!{
TiXmlElement *parent;
if (parentNode == nullptr)
{
    parent = new TiXmlElement("%!Name%");
}
else
{
    parent = parentNode;
}

%% 

if (parentNode == nullptr)
{
    TiXmlDocument doc;
    doc.LinkEndChild(parent);

    TiXmlPrinter printer;
    printer.SetIndent("    ");
    doc.Accept(&printer);
    return printer.CStr();
}
else
{
    return "";
}
!}

method toXml body default = !{
{ // %field%
    std::stringstream oss;
    oss << %field%;
    parent->SetAttribute("%field%", oss.str().c_str());
}
!}

method toXml body string = !{
{ // %field%
    std::stringstream oss;
    oss << %field%;
    parent->SetAttribute("%field%", oss.str().c_str());
}
!}

method toXml body struct = !{ 
{ // %field%
    TiXmlElement * element = new TiXmlElement("%field%");
    std::string xml = %field%.toXml(element);
    parent->LinkEndChild(element);
}
!}

method toXml body array = !{ 
// write array %field%
TiXmlElement * %field%_element = new TiXmlElement("%field%");
parent->LinkEndChild(%field%_element);
%field%_element->SetAttribute("size", %field%.size());

TiXmlElement * parent_%field% = parent;
parent = %field%_element;

for (size_t i = 0; i < %field%.size(); i++)
{
    %!Larva.SubLarvae[0].GetTypeDefinition()% &%!Larva.SubLarvae[0].Name% = %field%[i];

    %#method toXml body#%!Larva.SubLarvae[0].Name%#%!Larva.SubLarvae[0].FullName%#%
}

parent = parent_%field%;
!}

method toXml body array string = !{ 
// write array %field%
TiXmlElement * %field%_element = new TiXmlElement("%field%");
parent->LinkEndChild(%field%_element);
%field%_element->SetAttribute("size", %field%.size());

for (size_t i = 0; i < %field%.size(); i++)
{
    %!Larva.SubLarvae[0].GetTypeDefinition()% &%_value% = %field%[i];

    TiXmlElement * %_element% = new TiXmlElement("%!Larva.SubLarvae[0].Name%");
    
    std::stringstream oss;
    oss << %_value%;
    %_element%->SetAttribute("value", oss.str().c_str());

    %field%_element->LinkEndChild(%_element%);
}
!}


## fromXml

method fromXml param = !{const std::string &xml, TiXmlElement *parentNode!}
method fromXml returnType = void

method fromXml body =
!{
TiXmlElement *root;
TiXmlDocument doc;

if (parentNode == nullptr)
{
    doc.Parse(xml.c_str());
    root = doc.RootElement();
}
else
{
    root = parentNode;
}

%readDirect%

%~struct% 
%~array% 

!}

method fromXml body readDirect = !{
%~default% 
%~string% 
!}

method fromXml body readDirect default = !{
// %field%
root->Attribute("%field%", &%field%);
!}

method fromXml body readDirect string = !{
// %field%
%field% = root->Attribute("%field%");
!}

method fromXml body readDirect struct = !{
// %field%
%field%.fromXml("", root);
!}

method fromXml body struct = !{ 
// %field%
for (TiXmlNode *child = root->FirstChild(); child != 0; child = child->NextSibling()) 
{
    if (_stricmp(child->Value(), "%field%") == 0)
    {
        TiXmlElement *element = child->ToElement();
        %field%.fromXml("", element);
        break;
    }
}

!}

method fromXml body array = !{ 
// read array %field%
for (TiXmlNode *child = root->FirstChild(); child != 0; child = child->NextSibling()) 
{
    if (_stricmp(child->Value(), "%field%") == 0)
    {
        TiXmlElement *element = child->ToElement();

        TiXmlElement *originalRoot = root;

        for (TiXmlNode *arrayChild = element->FirstChild(); arrayChild != 0; arrayChild = arrayChild->NextSibling()) 
        {
            root = arrayChild->ToElement();
            
            %!Larva.SubLarvae[0].GetTypeDefinition()% sub;

            %#method fromXml body readDirect#sub#%!Larva.SubLarvae[0].FullName%#%

            %field%.push_back(sub);
        }

        root = originalRoot;

        break;
    }
}
!}
